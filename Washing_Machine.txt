Coverage Report by file with details

=================================================================================
=== File: Washing_Machine.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           95        79        16      83.1

================================Statement Details================================

Statement Coverage for file Washing_Machine.v --
NOTE: The modification timestamp for source file 'Washing_Machine.v' has been altered since compilation.

    1                                                //////////////////////////// Module ports list, declaration, and data type ///////////////////////////////
    2                                                
    3                                                module Washing_Machine(
    4                                                  input wire rst_n,
    5                                                  input wire clk,
    6                                                  input wire start,
    7                                                  input wire double_wash,
    8                                                  input wire dry_wash,
    9                                                  input wire time_pause,  // time_pause input added
    10                                                 input wire door_closed, 
    11                                                 output reg done,
    12                                                 output reg error_signal // signal to show if error occurs due to door being open
    13                                               );
    14                                               
    15                                               
    16                                               ///////////////////////////////////////////////// Parameters /////////////////////////////////////////////
    17                                               
    18                                               // Define states
    19                                               localparam IDLE        = 3'b000,
    20                                                          FILL_WATER  = 3'b001,
    21                                                          WASH        = 3'b010,
    22                                                          RINSE       = 3'b011,
    23                                                          SPIN        = 3'b100,
    24                                                          DRY         = 3'b101,
    25                                                          STEAM_CLEAN = 3'b110,
    26                                                          ERROR       = 3'b111;
    27                                               
    28                                               // Define the number of counts required by the counter to reach specific time
    29                                               localparam numberOfCounts_10seconds  = 6'd9,   // Fill water
    30                                                          numberOfCounts_20seconds  = 6'd19,  // Spin
    31                                                          numberOfCounts_50seconds  = 6'd49,  // Wash and rinse
    32                                                          numberofCounts_1minute    = 6'd59;  // Dry, steam clean
    33                                               
    34                                               //////////////////////////////// Variables and Internal Connections //////////////////////////////////////
    35                                               
    36                                               reg [2:0] current_state, next_state, prev_state;
    37                                               reg [5:0] counter, counter_comb, backup_counter;
    38                                               reg timeout;
    39                                               reg [1:0] number_of_washes;
    40                                               
    41                                               //////////////////////////////////// Sequential Procedural Blocks ////////////////////////////////////////
    42                                               
    43                                               // Logic to support the "double wash" option
    44              1                         43     always @(posedge clk) begin
    45                                                 if (current_state == IDLE) begin
    46              1                         10         number_of_washes <= 'd0; // Reset the number of washes in IDLE
    47                                                 end else if ((current_state == WASH) && timeout) begin
    48              1                          3         number_of_washes <= number_of_washes + 'd1; // Increment the number of washes
    49                                                 end
    50                                               end  
    51                                               
    52                                               // Current state sequential logic
    53              1                         60     always @(posedge clk or negedge rst_n) begin
    54                                                 if (!rst_n) begin
    55              1                         15         current_state <= IDLE; // Reset to IDLE state asynchronously
    56              1                         15         prev_state <= IDLE; // Initialize prev_state to IDLE
    57                                                 end else begin
    58              1                         45         current_state <= next_state; // Update the state normally
    59                                                   // Save state only when entering ERROR state
    60                                                   if (current_state != ERROR && next_state == ERROR) begin
    61              1                          4           prev_state <= current_state;
    62                                                   end
    63                                                 end
    64                                               end
    65                                               
    66                                               // Counter sequential logic
    67              1                        564     always @(posedge clk or negedge rst_n) begin
    68                                                 if (!rst_n) begin
    69              1                         15         counter <= 'd0; // Reset the counter asynchronously
    70              1                         15         backup_counter <= 'd0; // Initialize backup_counter
    71                                                 end else begin
    72                                                   // Normal counter update logic
    73                                                   if (current_state != ERROR) begin
    74              1                        546           counter <= counter_comb;
    75                                                   end
    76                                               
    77                                                   // Save counter when entering ERROR state
    78                                                   if (current_state != ERROR && next_state == ERROR) begin
    79              1                          4           backup_counter <= counter;
    80                                                   end
    81                                               
    82                                                   // Restore counter when exiting ERROR state
    83                                                   if (current_state == ERROR && next_state != ERROR) begin
    84              1                          2           counter <= backup_counter;
    85                                                   end
    86                                                 end
    87                                               end
    88                                               
    89                                               //////////////////////////////////// Combinational Procedural Blocks /////////////////////////////////////
    90                                               
    91                                               
    92                                               // Next state combinational logic
    93              1                         98     always @(*) begin
    94              1                         98       next_state = IDLE; // Default value to avoid unintentional latches
    95                                                 error_signal = 1'b0;
    96                                                 case (current_state)
    97                                                   IDLE: begin
    98              1                          2           if(!door_closed) begin
    99              1                          2             next_state = ERROR;
    100                                                      error_signal = 'b1;  
    101             1                          9           end else if (dry_wash && start) begin
    102                                                      next_state = STEAM_CLEAN; // Transition to STEAM_CLEAN
    103             1                         14           end else if (start) begin
    104                                                      next_state = FILL_WATER; // Transition to FILL_WATER
    105             1                         13           end else begin
    106                                                      next_state = current_state; // Remain in IDLE
    107                                                    end
    108                                                  end
    109                                              
    110                                                  FILL_WATER: begin
    111             1                    ***0***           if (!door_closed) begin
    112             1                    ***0***             next_state = ERROR; // Transition to ERROR if door not closed
    113                                                      error_signal = 'b1;
    114             1                          3           end else if (timeout) begin
    115                                                      next_state = WASH; // Transition to WASH
    116             1                          4           end else begin
    117                                                      next_state = current_state; // Remain in IDLE
    118                                                    end
    119                                                  end
    120                                              
    121                                                  WASH: begin
    122             1                    ***0***           if (!door_closed) begin
    123             1                    ***0***             next_state = ERROR; // Transition to ERROR if door not closed
    124                                                      error_signal = 'b1;
    125             1                          7           end else if (timeout) begin
    126                                                      next_state = RINSE; // Transition to WASH
    127             1                          5           end else begin
    128                                                      next_state = current_state; // Remain in IDLE
    129                                                    end
    130                                                  end
    131                                              
    132                                                  RINSE: begin
    133             1                    ***0***           if (!door_closed) begin
    134             1                    ***0***             next_state = ERROR; // Transition to ERROR if door not closed
    135                                                      error_signal = 'b1;
    136                                                    end else if (timeout) begin
    137             1                          2             if (double_wash && (number_of_washes == 'd1)) begin
    138                                                        next_state = WASH; // Transition to WASH for second wash
    139             1                          4             end else begin
    140                                                        next_state = SPIN; // Otherwise, transition to SPIN
    141                                                      end
    142             1                          3           end else begin
    143                                                      next_state = current_state; // Remain in RINSE
    144                                                    end
    145                                                  end
    146                                              
    147                                                  SPIN: begin
    148             1                    ***0***           if (!door_closed) begin
    149             1                    ***0***             next_state = ERROR; // Transition to ERROR if door not closed
    150                                                      error_signal = 'b1;
    151             1                          4           end else if (timeout) begin
    152                                                      next_state = DRY; // Transition to DRY
    153             1                          3           end else begin
    154                                                      next_state = current_state; // Remain in IDLE
    155                                                    end
    156                                                  end
    157                                              
    158                                                  DRY: begin
    159             1                    ***0***           if (!door_closed) begin
    160             1                    ***0***             next_state = ERROR; // Transition to ERROR if door not closed
    161                                                      error_signal = 'b1;
    162             1                          3           end else if (timeout) begin
    163                                                      next_state =IDLE; // Transition back to IDLE after complete cycle
    164             1                          2           end else begin
    165                                                      next_state = current_state; // Remain in IDLE
    166                                                    end
    167                                                  end
    168                                                  STEAM_CLEAN: begin
    169             1                          4           if (!door_closed) begin
    170             1                          4             next_state = ERROR; // Transition to ERROR if door not closed
    171                                                      error_signal = 'b1;
    172             1                          1           end else if (timeout) begin
    173                                                      next_state =IDLE; // Transition back to IDLE after steam clean
    174             1                          8           end else begin
    175                                                      next_state = current_state; // Remain in IDLE
    176                                                    end
    177                                                  end
    178                                              
    179                                                  ERROR: begin  
    180             1                          2           if (door_closed) begin  
    181             1                          2             next_state = prev_state;
    182                                                      error_signal = 'b0;
    183             1                          4           end else begin 
    184                                                      next_state = current_state; // Remain in ERROR
    185                                                      end  
    186                                                    end
    187             1                          1         default: begin
    188                                                    next_state = IDLE; // Default case
    189                                                  end
    190                                                endcase
    191                                              end
    192                                              
    193             1                         33     // Output combinational logic
    194             1                         33     always @(*) begin
    195                                                done = (current_state == IDLE) ? 'd1 : 'd0; // 'done' is high only in IDLE state
    196                                              end
    197                                              
    198             1                        557     // 6-bit counter combinational logic
    199             1                        557     always @(*) begin
    200             1                        557       counter_comb = counter;
    201                                                timeout = 1'b0;
    202                                              
    203                                                case (current_state)
    204             1                          8         IDLE: begin
    205             1                          8           counter_comb = 'd0; // Counter does not count in IDLE
    206                                                    timeout = 1'b0;
    207                                                  end
    208                                              
    209                                                  FILL_WATER: begin
    210             1                          3           if (counter == numberOfCounts_10seconds) begin
    211             1                          3             counter_comb = 'd0; // Reset counter and set timeout
    212                                                      timeout = 1'b1;
    213             1                          1           end else if (time_pause) begin
    214             1                          1             counter_comb = counter; // Freeze counter
    215                                                      timeout = 1'b0;
    216             1                         28           end else begin
    217             1                         28             counter_comb = counter + 1'd1; // Increment counter
    218                                                      timeout = 1'b0;
    219                                                    end
    220                                                  end
    221                                              
    222                                                  // Similar logic applies for other states (WASH, RINSE, SPIN, DRY, STEAM_CLEAN)
    223                                                  WASH: begin
    224             1                          3           if (counter == numberOfCounts_50seconds) begin
    225             1                          3             counter_comb = 'd0;
    226                                                      timeout = 1'b1;
    227             1                    ***0***           end else if (time_pause) begin
    228             1                    ***0***             counter_comb = counter;
    229                                                      timeout = 1'b0;
    230             1                        148           end else begin
    231             1                        148             counter_comb = counter + 1'd1;
    232                                                      timeout = 1'b0;
    233                                                    end
    234                                                  end
    235                                              
    236                                                  RINSE: begin
    237             1                          3           if (counter == numberOfCounts_50seconds) begin
    238             1                          3             counter_comb = 'd0;
    239                                                      timeout = 1'b1;
    240             1                    ***0***           end else if (time_pause) begin
    241             1                    ***0***             counter_comb = counter;
    242                                                      timeout = 1'b0;
    243             1                        147           end else begin
    244             1                        147             counter_comb = counter + 1'd1;
    245                                                      timeout = 1'b0;
    246                                                    end
    247                                                  end
    248                                              
    249                                                  SPIN: begin
    250             1                          2           if (counter == numberOfCounts_20seconds) begin
    251             1                          2             counter_comb = 'd0;
    252                                                      timeout = 1'b1;
    253             1                          1           end else if (time_pause) begin
    254             1                          1             counter_comb = counter;
    255                                                      timeout = 1'b0;
    256             1                         39           end else begin
    257             1                         39             counter_comb = counter + 1'd1;
    258                                                      timeout = 1'b0;
    259                                                    end
    260                                                  end
    261                                              
    262                                                  DRY: begin
    263             1                          1           if (counter == numberofCounts_1minute) begin
    264             1                          1             counter_comb = 'd0;
    265                                                      timeout = 1'b1;
    266             1                    ***0***           end else if (time_pause) begin
    267             1                    ***0***             counter_comb = counter;
    268                                                      timeout = 1'b0;
    269             1                         60           end else begin
    270             1                         60             counter_comb = counter + 1'd1;
    271                                                      timeout = 1'b0;
    272                                                    end
    273                                                  end
    274                                              
    275                                                  STEAM_CLEAN: begin
    276             1                          1           if (counter == numberofCounts_1minute) begin
    277             1                          1             counter_comb = 'd0;
    278                                                      timeout = 1'b1;
    279             1                          1           end else if (time_pause) begin
    280             1                          1             counter_comb = counter;
    281                                                      timeout = 1'b0;
    282             1                        106           end else begin
    283             1                        106             counter_comb = counter + 1'd1;
    284                                                      timeout = 1'b0;
    285                                                    end
    286                                                  end
    287                                              
    288             1                          5         default: begin
    289             1                          5           counter_comb = 'd0;
    290                                                    timeout = 1'b0;
    291                                                  end
    292                                                endcase
    293                                              end
    294                                              
    295                                              //psl default clock = rose(clk);
    296                                              //psl property Reset_To_IDLE = always (rst_n == 0 -> next(current_state == IDLE));
    297                                              //psl assert Reset_To_IDLE;
    298                                              
    299                                              //psl property Done_Only_In_IDLE = always ((current_state == IDLE) -> (done == 1));
    300                                              //psl assert Done_Only_In_IDLE;
    301                                              
    302                                              //psl property IDLE_To_FILL_WATER = always ((current_state == IDLE && start && !dry_wash) -> eventually!(current_state == FILL_WATER));
    303                                              //psl assert IDLE_To_FILL_WATER;
    304                                              
    305                                              //psl property IDLE_To_STEAM_CLEAN = always ((current_state == IDLE && start && dry_wash) -> eventually!(current_state == STEAM_CLEAN));
    306                                              //psl assert IDLE_To_STEAM_CLEAN;
    307                                              
    308                                              //psl property Double_Wash_Transition = always ((current_state == RINSE && double_wash && number_of_washes == 1) -> eventually!(current_state == WASH));
    309                                              //psl assert Double_Wash_Transition;
    310                                              
    311                                              // Timeout for FILL_WATER
    312                                              //psl property Timeout_Fill_Water = always ((current_state == FILL_WATER && counter == numberOfCounts_10seconds) -> timeout);
    313                                              //psl assert Timeout_Fill_Water;
    314                                              
    315                                              // Timeout for WASH and RINSE
    316                                              //psl property Timeout_Wash_Rinse = always (((current_state == WASH || current_state == RINSE) && counter == numberOfCounts_50seconds) -> timeout);
    317                                              //psl assert Timeout_Wash_Rinse;
    318                                              
    319                                              // Timeout for SPIN
    320                                              //psl property Timeout_Spin = always ((current_state == SPIN && counter == numberOfCounts_20seconds) -> timeout);
    321                                              //psl assert Timeout_Spin;
    322                                              
    323                                              // Timeout for DRY and STEAM_CLEAN
    324                                              //psl property Timeout_Dry_Steam = always (((current_state == DRY || current_state == STEAM_CLEAN) && counter == numberofCounts_1minute) -> timeout);
    325                                              //psl assert Timeout_Dry_Steam;
    326                                              
    327                                              //psl property Time_Pause_Functionality = always (time_pause -> (counter == prev(counter_comb)));
    328                                              //psl assert Time_Pause_Functionality;
    329                                              
    330                                              // Ensure state restoration from ERROR
    331                                              //psl property Error_State_Restore = always ((current_state == ERROR && door_closed) -> next(current_state == prev_state));
    332                                              //psl assert Error_State_Restore;
    333                                              
    334                                              // Ensure counter restoration from ERROR
    335                                              //psl property Error_Counter_Restore = always ((current_state == ERROR && door_closed) -> next(counter == backup_counter));
    336                                              //psl assert Error_Counter_Restore;
    337                                              
    338                                              //psl property Steam_Clean_Behavior = always ((current_state == STEAM_CLEAN && timeout) -> next(current_state == IDLE));
    339                                              //psl assert Steam_Clean_Behavior;
    340                                              
    341                                              
    342                                              endmodule

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        78        70         8      89.7

================================Branch Details================================

Branch Coverage for file Washing_Machine.v --
NOTE: The modification timestamp for source file 'Washing_Machine.v' has been altered since compilation.

------------------------------------IF Branch------------------------------------
    45                                        43     Count coming in to IF
    45              1                         10       if (current_state == IDLE) begin
    47              1                          3       end else if ((current_state == WASH) && timeout) begin
                                              30     All False Count
Branch totals: 3 hits of 3 branches = 100.0%

------------------------------------IF Branch------------------------------------
    54                                        60     Count coming in to IF
    54              1                         15       if (!rst_n) begin
    57              1                         45       end else begin
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    60                                        45     Count coming in to IF
    60              1                          4         if (current_state != ERROR && next_state == ERROR) begin
                                              41     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    68                                       564     Count coming in to IF
    68              1                         15       if (!rst_n) begin
    71              1                        549       end else begin
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    73                                       549     Count coming in to IF
    73              1                        546         if (current_state != ERROR) begin
                                               3     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    78                                       549     Count coming in to IF
    78              1                          4         if (current_state != ERROR && next_state == ERROR) begin
                                             545     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    83                                       549     Count coming in to IF
    83              1                          2         if (current_state == ERROR && next_state != ERROR) begin
                                             547     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------CASE Branch------------------------------------
    95                                        98     Count coming in to CASE
    96              1                         38       case (current_state)
    109             1                          7     
    120             1                         12     
    131             1                          9     
    146             1                          7     
    157             1                          5     
    167             1                         13         end
    178             1                          6     
    186             1                          1           end
Branch totals: 9 hits of 9 branches = 100.0%

------------------------------------IF Branch------------------------------------
    97                                        38     Count coming in to IF
    97              1                          2         IDLE: begin
    100             1                          9             error_signal = 'b1;  
    102             1                         14             next_state = STEAM_CLEAN; // Transition to STEAM_CLEAN
    104             1                         13             next_state = FILL_WATER; // Transition to FILL_WATER
Branch totals: 4 hits of 4 branches = 100.0%

------------------------------------IF Branch------------------------------------
    110                                        7     Count coming in to IF
    110             1                    ***0***         FILL_WATER: begin
    113             1                          3             error_signal = 'b1;
    115             1                          4             next_state = WASH; // Transition to WASH
Branch totals: 2 hits of 3 branches = 66.6%

------------------------------------IF Branch------------------------------------
    121                                       12     Count coming in to IF
    121             1                    ***0***         WASH: begin
    124             1                          7             error_signal = 'b1;
    126             1                          5             next_state = RINSE; // Transition to WASH
Branch totals: 2 hits of 3 branches = 66.6%

------------------------------------IF Branch------------------------------------
    132                                        9     Count coming in to IF
    132             1                    ***0***         RINSE: begin
    135             1                          6             error_signal = 'b1;
    141             1                          3             end
Branch totals: 2 hits of 3 branches = 66.6%

------------------------------------IF Branch------------------------------------
    136                                        6     Count coming in to IF
    136             1                          2           end else if (timeout) begin
    138             1                          4               next_state = WASH; // Transition to WASH for second wash
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    147                                        7     Count coming in to IF
    147             1                    ***0***         SPIN: begin
    150             1                          4             error_signal = 'b1;
    152             1                          3             next_state = DRY; // Transition to DRY
Branch totals: 2 hits of 3 branches = 66.6%

------------------------------------IF Branch------------------------------------
    158                                        5     Count coming in to IF
    158             1                    ***0***         DRY: begin
    161             1                          3             error_signal = 'b1;
    163             1                          2             next_state =IDLE; // Transition back to IDLE after complete cycle
Branch totals: 2 hits of 3 branches = 66.6%

------------------------------------IF Branch------------------------------------
    168                                       13     Count coming in to IF
    168             1                          4         STEAM_CLEAN: begin
    171             1                          1             error_signal = 'b1;
    173             1                          8             next_state =IDLE; // Transition back to IDLE after steam clean
Branch totals: 3 hits of 3 branches = 100.0%

------------------------------------IF Branch------------------------------------
    179                                        6     Count coming in to IF
    179             1                          2         ERROR: begin  
    182             1                          4             error_signal = 'b0;
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    194                                       33     Count coming in to IF
    194             1                          8     always @(*) begin
    194             2                         25     always @(*) begin
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------CASE Branch------------------------------------
    202                                      557     Count coming in to CASE
    203             1                          8       case (current_state)
    208             1                         32     
    222             1                        151         // Similar logic applies for other states (WASH, RINSE, SPIN, DRY, STEAM_CLEAN)
    235             1                        150     
    248             1                         42     
    261             1                         61     
    274             1                        108     
    287             1                          5     
Branch totals: 8 hits of 8 branches = 100.0%

------------------------------------IF Branch------------------------------------
    209                                       32     Count coming in to IF
    209             1                          3         FILL_WATER: begin
    212             1                          1             timeout = 1'b1;
    215             1                         28             timeout = 1'b0;
Branch totals: 3 hits of 3 branches = 100.0%

------------------------------------IF Branch------------------------------------
    223                                      151     Count coming in to IF
    223             1                          3         WASH: begin
    226             1                    ***0***             timeout = 1'b1;
    229             1                        148             timeout = 1'b0;
Branch totals: 2 hits of 3 branches = 66.6%

------------------------------------IF Branch------------------------------------
    236                                      150     Count coming in to IF
    236             1                          3         RINSE: begin
    239             1                    ***0***             timeout = 1'b1;
    242             1                        147             timeout = 1'b0;
Branch totals: 2 hits of 3 branches = 66.6%

------------------------------------IF Branch------------------------------------
    249                                       42     Count coming in to IF
    249             1                          2         SPIN: begin
    252             1                          1             timeout = 1'b1;
    255             1                         39             timeout = 1'b0;
Branch totals: 3 hits of 3 branches = 100.0%

------------------------------------IF Branch------------------------------------
    262                                       61     Count coming in to IF
    262             1                          1         DRY: begin
    265             1                    ***0***             timeout = 1'b1;
    268             1                         60             timeout = 1'b0;
Branch totals: 2 hits of 3 branches = 66.6%

------------------------------------IF Branch------------------------------------
    275                                      108     Count coming in to IF
    275             1                          1         STEAM_CLEAN: begin
    278             1                          1             timeout = 1'b1;
    281             1                        106             timeout = 1'b0;
Branch totals: 3 hits of 3 branches = 100.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms             12        12         0     100.0

================================Condition Details================================

Condition Coverage for file Washing_Machine.v --
NOTE: The modification timestamp for source file 'Washing_Machine.v' has been altered since compilation.

----------------Focused Condition View-------------------
Line       47 Item    1  ((current_state == 2) && timeout)
Condition totals: 2 of 2 input terms covered = 100.0%

----------------Focused Condition View-------------------
Line       60 Item    1  ((current_state != 7) && (next_state == 7))
Condition totals: 2 of 2 input terms covered = 100.0%

----------------Focused Condition View-------------------
Line       78 Item    1  ((current_state != 7) && (next_state == 7))
Condition totals: 2 of 2 input terms covered = 100.0%

----------------Focused Condition View-------------------
Line       83 Item    1  ((current_state == 7) && (next_state != 7))
Condition totals: 2 of 2 input terms covered = 100.0%

----------------Focused Condition View-------------------
Line       100 Item    1  (dry_wash && start)
Condition totals: 2 of 2 input terms covered = 100.0%

----------------Focused Condition View-------------------
Line       136 Item    1  (double_wash && (number_of_washes == 1))
Condition totals: 2 of 2 input terms covered = 100.0%


Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                        78.5
        States                       8         8         0     100.0
        Transitions                 21        12         9      57.1

================================FSM Details================================

FSM Coverage for file Washing_Machine.v --

FSM_ID: current_state
    Current State Object : current_state
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
  96                IDLE                   0
 109          FILL_WATER                   1
 167         STEAM_CLEAN                   6
 178               ERROR                   7
 120                WASH                   2
 131               RINSE                   3
 146                SPIN                   4
 157                 DRY                   5
    Covered States :
    ----------------
                   State           Hit_count
                   -----           ---------
                    IDLE                  18
              FILL_WATER                   6
             STEAM_CLEAN                  11
                   ERROR                   5
                    WASH                   7
                   RINSE                   6
                    SPIN                   4
                     DRY                   3
    Covered Transitions :
    ---------------------
Line            Trans_ID           Hit_count          Transition          
----            --------           ---------          ----------          
 103                   0                   3          IDLE -> FILL_WATER  
 101                   1                   5          IDLE -> STEAM_CLEAN 
 114                   3                   3          FILL_WATER -> WASH  
 172                   6                   2          STEAM_CLEAN -> IDLE 
 169                   7                   4          STEAM_CLEAN -> ERROR
  56                   8                   2          ERROR -> IDLE       
 125                   9                   3          WASH -> RINSE       
  55                  11                   1          WASH -> IDLE        
 139                  12                   2          RINSE -> SPIN       
 137                  13                   1          RINSE -> WASH       
 151                  16                   2          SPIN -> DRY         
 162                  19                   2          DRY -> IDLE         
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
  98                   2          IDLE -> ERROR       
 111                   4          FILL_WATER -> ERROR 
  55                   5          FILL_WATER -> IDLE  
 122                  10          WASH -> ERROR       
 133                  14          RINSE -> ERROR      
  55                  15          RINSE -> IDLE       
 148                  17          SPIN -> ERROR       
  55                  18          SPIN -> IDLE        
 159                  20          DRY -> ERROR        


    Summary                     Active      Hits    Misses % Covered
    -------                     ------      ----    ------ ---------
        States                       8         8         0     100.0
        Transitions                 21        12         9      57.1
Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                     78        71         7      91.0

================================Toggle Details================================

Toggle Coverage for File Washing_Machine.v --

       Line                                   Node      1H->0L      0L->1H  "Coverage"
--------------------------------------------------------------------------------------
         36                          prev_state[0]           0           0        0.00 
         37                      backup_counter[5]           0           0        0.00 
         37                      backup_counter[4]           0           1       50.00 
         37                      backup_counter[3]           0           1       50.00 
         37                      backup_counter[1]           0           1       50.00 

Total Node Count     =         39 
Toggled Node Count   =         34 
Untoggled Node Count =          5 

Toggle Coverage      =       91.0% (71 of 78 bins)

=================================================================================
=== File: Washing_Machine_tb.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                          193       171        22      88.6

================================Statement Details================================

Statement Coverage for file Washing_Machine_tb.v --

    1                                                `timescale 1 ns / 1 ns
    2                                                
    3                                                module Washing_Machine_tb();
    4                                                  
    5                                                ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    6                                                ///////////////////////////////////////// DUT Signals ///////////////////////////////////////////////////// 
    7                                                ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    8                                                  
    9                                                  reg rst_n_tb;
    10                                                 reg clk_tb;
    11                                                 reg start_tb;
    12                                                 reg double_wash_tb;
    13                                                 reg dry_wash_tb;
    14                                                 reg time_pause_tb;
    15                                                 reg door_closed_tb;
    16                                                 wire done_tb;
    17                                                 wire error_signal_tb;
    18                                               
    19                                               //////////////////////////////////////////////////////////////////////////////////////////////////////////
    20                                               ///////////////////////////////////////////////// Parameters /////////////////////////////////////////////
    21                                               //////////////////////////////////////////////////////////////////////////////////////////////////////////
    22                                                 
    23                                                 localparam IDLE        = 3'b000,
    24                                                            FILL_WATER  = 3'b001,
    25                                                            WASH        = 3'b010,
    26                                                            RINSE       = 3'b011,
    27                                                            SPIN        = 3'b100,
    28                                                            DRY         = 3'b101,
    29                                                            STEAM_CLEAN = 3'b110,
    30                                                            ERROR       = 3'b111;
    31                                                           
    32                                                 localparam numberOfCounts_10seconds  = 6'd10, //fill water
    33                                                            numberOfCounts_20seconds = 6'd20, //spin
    34                                                            numberOfCounts_50seconds = 6'd50, //wash and rinse
    35                                                            numberofCounts_1minute = 6'd60, //dry,steam clean
    36                                                            period = 10'd1000; //for clock period 
    37                                                             
    38                                               /////////////////////////////////////////////////////////////////////////////////////////////////////////////
    39                                               ////////////////////////////////////////// initial block ////////////////////////////////////////////////////
    40                                               /////////////////////////////////////////////////////////////////////////////////////////////////////////////
    41                                                 
    42                                                 initial
    43                                                   begin
    44                                                     
    45                                                     // Dump (save) the waveforms
    46              1                          1           $dumpfile("washing_machine.vcd");
    47              1                          1           $dumpvars;
    48                                                            
    49                                                         // Signals initialization
    50              1                          1               initialization();
    51                                                         
    52                                                         // Reset
    53              1                          1               reset();
    54                                                     
    55                                                         // Test case 1: Check that as long as rst_n is low (even start is on), the machine is in the IDLE state.
    56              1                          1               test_case_1();
    57                                                     
    58                                                         // Test case 2: Check that a cycle starts only when a start is asserted.
    59              1                          1               test_case_2();
    60                                                       
    61                                                         // Test case 3: Check that the filling water phase takes 10 seconds.
    62              1                          1               test_case_3();
    63                                                     
    64                                                         // Test case 4: Check that the washing phase takes 50 seconds.
    65              1                          1          	    test_case_4();
    66                                                     
    67                                                         // Test case 5: Check that the rinsing phase takes 50 seconds.
    68              1                          1               test_case_5();
    69                                                     
    70                                                         // Test case 6: Check that the spinning phase takes 20 seconds.
    71              1                          1               test_case_6();
    72                                               
    73                                                         // Test case 7: Check that the drying phase takes 1 minute.
    74              1                          1               test_case_7();
    75                                                     
    76                                                         // Test case 8: Check that the output done is set after the drying phase is completed and
    77                                                         // remains high until start is set again.
    78              1                          1               test_case_8();
    79                                                     
    80                                                         // Test case 9: Check the workability of the double wash option and that washing and rinsing stages
    81                                                         // are repeated when double_wash is high.
    82              1                          1               test_case_9();
    83                                                     
    84                                                         // Test case 10: Check the workability of the time pause option and that the current phase is paused
    85                                                         // as long as the time_pause input is set.
    86              1                          1               test_case_10();
    87                                               
    88                                                         // Test case 11: Check the workability of the dry wash option and that it transitions to the STEAM_CLEAN
    89                                                         //phase once dry_wash is set to high.
    90              1                          1               test_case_11();
    91                                                         
    92                                                         // Test the time_pause option again and make sure it stays in the same state and also freeze the counter until time_pause is desserted.
    93              1                          1               test_case_12();
    94                                               
    95                                                         // Randomized test case used to reset the FSM during random times and random states to make sure it returns to IDLE state after rst is desserted.
    96              1                          1               test_case_13();
    97                                               
    98                                                         // This test case ensures the FSM transitions to the ERROR state correctly when a condition requiring it is met (e.g., door_closed is low).
    99              1                          1               test_case_14();
    100                                              
    101                                                        // This test case verifies that the FSM saves the current state and counter value when entering the ERROR state.
    102             1                          1               test_case_15();
    103                                              
    104                                                        // This test case ensures the FSM resumes from the saved state and counter value upon exiting the ERROR state.
    105             1                          1               test_case_16();
    106                                              
    107                                                        // This test verifies the dry wash sequence when interrupted by time_pause and transitioning to ERROR.
    108             1                          1               test_case_17();
    109                                                        
    110             1                          1           $finish;
    111                                                  end
    112                                                
    113                                              /////////////////////////////////////////////////////////////////////////////////////////////////////////
    114                                              //////////////////////////////////////////////// TASKS //////////////////////////////////////////////////
    115                                              /////////////////////////////////////////////////////////////////////////////////////////////////////////
    116                                              
    117                                                task initialization();
    118                                                  begin
    119             1                          1           clk_tb = 1'b0;
    120             1                          1           start_tb = 1'b0;
    121             1                          1           double_wash_tb = 1'b0;
    122             1                          1           dry_wash_tb = 1'b0;
    123             1                          1           time_pause_tb = 1'b0;
    124             1                          1           door_closed_tb = 1'b1; //initially closed
    125                                                  end
    126                                                endtask
    127                                                
    128                                                task reset;
    129                                                  begin
    130             1                          7           rst_n_tb = 'd1;
    131             1                          7           #1
    132             1                          7           rst_n_tb = 'd0;
    133             1                          7           #1
    134             1                          7           rst_n_tb = 'd1;
    135                                                  end
    136                                                endtask 
    137                                                
    138                                                task test_case_1;
    139                                                  begin
    140             1                          1           $display("Test case 1 running");
    141             1                          1           start_tb = 1'b1;
    142             1                          1           rst_n_tb = 1'b0;
    143             1                          1           #(period);
    144                                                    if( DUT.current_state == IDLE )
    145                                                      begin
    146             1                          1               $display("Test case 1 passed");
    147                                                      end
    148                                                    else
    149                                                      begin
    150             1                    ***0***               $display("Test case 1 failed");
    151                                                      end
    152                                                  end
    153                                                endtask
    154                                                
    155                                                task test_case_2;
    156                                                  begin
    157             1                          1           $display("Test case 2 running");
    158             1                          1           rst_n_tb = 1'b1;
    159             1                          1           start_tb = 1'b1;
    160             1                          1           dry_wash_tb = 1'b0;
    161             1                          1           #(period);
    162                                                    if( DUT.current_state == FILL_WATER )
    163             1                          1             $display("Test case 2 passed");
    164                                                    else
    165             1                    ***0***             $display("Test case 2 failed");
    166                                                  end
    167                                                endtask
    168                                                
    169                                                task test_case_3;
    170                                                  begin
    171             1                          1           $display("Test case 3 running");
    172             1                          1           delay(numberOfCounts_10seconds);
    173                                                    if( DUT.current_state == WASH)
    174                                                      begin
    175             1                          1               $display("Test case 3 passed");
    176                                                      end
    177                                                    else
    178                                                      begin
    179             1                    ***0***               $display("Test case 3 failed");
    180                                                      end
    181                                              	   end
    182                                                endtask
    183                                                
    184                                                task test_case_4;
    185                                                  begin
    186             1                          1           $display("Test case 4 running");
    187             1                          1           delay(numberOfCounts_50seconds);
    188                                                    if( DUT.current_state == RINSE)
    189                                                      begin
    190             1                          1               $display("Test case 4 passed");
    191                                                      end
    192                                                    else
    193                                                      begin
    194             1                    ***0***               $display("Test case 4 failed");
    195                                                      end
    196                                              	   end
    197                                                endtask
    198                                                
    199                                                task test_case_5;
    200                                                  begin
    201             1                          1           $display("Test case 5 running");
    202             1                          1           delay(numberOfCounts_50seconds);
    203                                                    if( DUT.current_state == SPIN)
    204                                                      begin
    205             1                          1               $display("Test case 5 passed");
    206                                                      end
    207                                                    else
    208                                                      begin
    209             1                    ***0***               $display("Test case 5 failed");
    210                                                      end
    211                                              	   end
    212                                                endtask
    213                                                
    214                                                task test_case_6;
    215                                                  begin
    216             1                          1           $display("Test case 6 running");
    217             1                          1           delay(numberOfCounts_20seconds);
    218                                                    if( DUT.current_state == DRY)
    219                                                      begin
    220             1                          1               $display("Test case 6 passed");
    221                                                      end
    222                                                    else
    223                                                      begin
    224             1                    ***0***               $display("Test case 6 failed");
    225                                                      end
    226                                                  end
    227                                                endtask
    228                                              
    229                                                task test_case_7;
    230                                                  begin
    231             1                          1           $display("Test case 7 running");
    232             1                          1           delay(numberofCounts_1minute);
    233                                                    if( DUT.current_state == IDLE)
    234                                                      begin
    235             1                          1               $display("Test case 7 passed");
    236                                                      end
    237                                                    else
    238                                                      begin
    239             1                    ***0***               $display("Test case 7 failed");
    240                                                      end
    241                                                  end
    242                                                endtask
    243                                                
    244                                                task test_case_8;
    245                                                  begin
    246             1                          1           $display("Test case 8 running");
    247             1                          1           start_tb = 1'b0;
    248             1                          1           #(period * 6);
    249                                                    if(done_tb == 1'b1)
    250                                                      begin
    251             1                          1               start_tb = 1'b1;
    252             1                          1               #(period);
    253                                                        if(done_tb == 1'b0)
    254                                                          begin
    255             1                          1                   $display("Test case 8 passed");
    256                                                          end
    257                                                        else
    258                                                          begin
    259             1                    ***0***                   $display("Test case 8 failed");
    260                                                          end
    261                                                      end
    262                                                    else
    263                                                      begin
    264             1                    ***0***               $display("Test case 8 failed");
    265                                                      end
    266                                                  end
    267                                                endtask
    268                                                
    269                                                task test_case_9;
    270                                                  begin
    271             1                          1           $display("Test case 9 running");
    272             1                          1           double_wash_tb = 'd1;
    273             1                          1           delay(numberOfCounts_10seconds);
    274                                                    // Now filling water is over
    275             1                          1           delay(numberOfCounts_50seconds);
    276                                                    // Now first washing is over
    277             1                          1           delay(numberOfCounts_50seconds);
    278                                                    // Now first rinsing is over
    279                                                    if(DUT.current_state == WASH)
    280                                                      begin
    281             1                          1               delay(numberOfCounts_50seconds);
    282                                                        // Now second washing is over
    283                                                        if(DUT.current_state == RINSE)
    284                                                          begin
    285             1                          1                   delay(numberOfCounts_50seconds);
    286                                                            // Now second rinsing is over
    287                                                            if(DUT.current_state == SPIN)
    288                                                              begin
    289             1                          1                       $display("Test case 9 passed");
    290                                                              end
    291                                                            else
    292                                                              begin
    293             1                    ***0***                       $display("Test case 9 failed");
    294                                                              end
    295                                                          end
    296                                                        else
    297                                                          begin
    298             1                    ***0***                   $display("Test case 9 failed");
    299                                                          end
    300                                                      end
    301                                                    else  
    302                                                      begin
    303             1                    ***0***               $display("Test case 9 failed");
    304                                                      end
    305                                                  end
    306                                                endtask
    307                                                
    308                                                task test_case_10;
    309                                                  begin
    310             1                          1           $display("Test case 10 running");
    311             1                          1           double_wash_tb = 'd0;
    312             1                          1           time_pause_tb = 1'b1;
    313             1                          1           delay(numberOfCounts_10seconds);
    314                                                    if(DUT.current_state == SPIN)
    315                                                      begin
    316             1                          1               time_pause_tb = 1'b0;
    317             1                          1               delay(numberOfCounts_20seconds);
    318                                                        if(DUT.current_state == DRY)
    319                                                          begin
    320             1                          1                   $display("Test case 10 passed");
    321                                                          end
    322                                                        else
    323                                                          begin
    324             1                    ***0***                   $display("Test case 10 failed");
    325                                                          end
    326                                                      end
    327                                                    else
    328                                                      begin
    329             1                    ***0***               $display("Test case 10 failed");
    330                                                      end
    331                                                  end
    332                                                endtask
    333                                                
    334                                                  task test_case_11;
    335                                                  begin
    336             1                          1           $display("Test case 11 running");
    337             1                          1           reset();
    338             1                          1           rst_n_tb = 1'b1;
    339             1                          1           start_tb = 1'b1;
    340             1                          1           dry_wash_tb = 1'b1;
    341             1                          1           #(period);
    342             1                          1           dry_wash_tb = 1'b0;
    343             1                          1           delay(numberofCounts_1minute);
    344                                                    if( DUT.current_state == IDLE)
    345             1                          1             $display("Test case 11 passed");
    346                                                    else
    347             1                    ***0***             $display("Test case 11 failed");
    348                                                  end
    349                                                endtask
    350                                              
    351                                                task test_case_12;
    352                                                begin
    353             1                          1         $display("Test case 12 running");
    354             1                          1         reset();
    355             1                          1         start_tb = 1'b1;
    356             1                          1         #(period);
    357             1                          1         delay(numberOfCounts_10seconds / 2.0); // Let the counter reach halfway
    358             1                          1         time_pause_tb = 1'b1;
    359             1                          1         #(period * 3);                // Pause for a while
    360             1                          1         time_pause_tb = 1'b0;      
    361             1                          1         delay(numberOfCounts_10seconds / 2.0); // Resume and complete counting;
    362             1                          1         $display("Counter after resume: %d", DUT.counter);
    363             1                          1         $display("Current State: %d", DUT.current_state);
    364             1                          1         $display("Timeout flag: %d", DUT.timeout); 
    365                                                  if (DUT.current_state == WASH) begin
    366             1                          1           $display("Test case 12 passed");
    367                                                  end else begin
    368             1                    ***0***           $display("Test case 12 failed");
    369                                                  end
    370                                                end
    371                                              endtask
    372                                              
    373                                              
    374                                                task test_case_13;
    375                                                  reg [31:0] random_counter;
    376                                                  begin
    377             1                          1           $display("Test case 13 running");
    378                                                    // Initialize inputs
    379             1                          1           rst_n_tb = 1'b1;
    380             1                          1           start_tb = 1'b0;
    381             1                          1           dry_wash_tb = 1'b0;
    382             1                          1           #10 rst_n_tb = 1'b0; // Ensure FSM starts in IDLE
    382             2                          1     
    383             1                          1           #10 rst_n_tb = 1'b1;
    383             2                          1     
    384                                              
    385                                                    // Randomized signal generation loop
    386             1                         30           repeat(30) begin
    387                                                      // Randomize control signals
    388             1                         30             random_counter = $random;
    389             1                         30             start_tb = random_counter[0];
    390             1                         30             dry_wash_tb = random_counter[1];
    391                                              
    392                                                      // Apply inputs for a random duration
    393             1                         30             #(random_counter % 20);
    394                                              
    395                                                      // Randomly assert reset
    396                                                      if ($random % 3 == 0) begin
    397             1                          6               $display("Resetting FSM at time %0t", $time);
    398             1                          6               rst_n_tb = 1'b0;
    399             1                          6               #10 rst_n_tb = 1'b1; // De-assert reset
    399             2                          6     
    400                                                      end
    401                                              
    402                                                      // Monitor FSM state to ensure it transitions to IDLE on reset
    403                                                      if (!rst_n_tb) begin
    404                                                        if (DUT.current_state != IDLE) begin
    405             1                    ***0***                 $error("FSM did not return to IDLE state as expected at time %0t", $time);
    406                                                        end
    407                                                      end
    408                                                    end
    409             1                          1           $display("Test case 13 passed");
    410                                                  end
    411                                                endtask
    412                                              
    413                                                task test_case_14;
    414                                                begin
    415             1                          1         $display("Test case 14 running");
    416             1                          1         reset();
    417             1                          1         start_tb = 1'b1;
    418             1                          1         door_closed_tb = 1'b1; // Initially, the door is closed
    419             1                          1         #(period);
    420             1                          1         door_closed_tb = 1'b0; // Simulate door open
    421             1                          1         #(period * 2); // Allow time for transition to ERROR
    422                                                  if (DUT.current_state == ERROR) begin
    423             1                          1           $display("Test case 14 passed");
    424                                                  end else begin
    425             1                    ***0***           $display("Test case 14 failed");
    426                                                  end
    427                                                end
    428                                                endtask
    429                                              
    430                                                task test_case_15;
    431                                                reg [31:0] saved_counter;
    432                                                reg [2:0] saved_state;
    433                                                begin
    434             1                          1         $display("Test case 15 running");
    435             1                          1         reset();
    436             1                          1         start_tb = 1'b1;
    437             1                          1         door_closed_tb = 1'b1;
    438             1                          1         #(period);
    439             1                          1         delay(numberOfCounts_10seconds / 2); // Progress partway through FILL_WATER
    440             1                          1         saved_state = DUT.current_state;
    441             1                          1         saved_counter = DUT.counter;
    442             1                          1         door_closed_tb = 1'b0; // Trigger ERROR
    443             1                          1         #(period);
    444                                                  if (DUT.current_state == ERROR && DUT.prev_state == saved_state && DUT.backup_counter == saved_counter) begin
    445             1                          1           $display("Test case 15 passed");
    446                                                  end else begin
    447             1                    ***0***           $display("Test case 15 failed");
    448                                                  end
    449                                                end
    450                                                endtask
    451                                              
    452                                                task test_case_16;
    453                                                reg [31:0] saved_counter;
    454                                                reg [2:0] saved_state;
    455                                                begin
    456             1                          1         $display("Test case 16 running");
    457             1                          1         reset();
    458             1                          1         start_tb = 1'b1;
    459             1                          1         door_closed_tb = 1'b1;
    460             1                          1         #(period);
    461             1                          1         delay(numberOfCounts_10seconds / 2); // Progress partway through FILL_WATER
    462             1                          1         saved_state = DUT.current_state;
    463             1                          1         saved_counter = DUT.counter;
    464             1                          1         door_closed_tb = 1'b0; // Trigger ERROR
    465             1                          1         #(period);
    466             1                          1         door_closed_tb = 1'b1; // Resolve ERROR
    467             1                          1         #(period);
    468                                                  if (DUT.current_state == saved_state && DUT.counter == saved_counter) begin
    469             1                          1           $display("Test case 16 passed");
    470                                                  end else begin
    471             1                    ***0***           $display("Test case 16 failed");
    472                                                  end
    473                                                end
    474                                                endtask
    475                                              
    476                                                task test_case_17;
    477                                                reg [31:0] saved_counter;
    478                                                reg [2:0] saved_state;
    479                                                begin
    480             1                          1         $display("Test case 17 running");
    481             1                          1         reset();
    482             1                          1         dry_wash_tb = 1'b1;
    483             1                          1         start_tb = 1'b1;
    484             1                          1         #(period);
    485             1                          1         delay(numberofCounts_1minute / 2); // Progress halfway through STEAM_CLEAN
    486             1                          1         saved_state = DUT.current_state;
    487             1                          1         saved_counter = DUT.counter;
    488             1                          1         time_pause_tb = 1'b1; // Pause the FSM
    489             1                          1         #(period * 3); // Pause duration
    490             1                          1         time_pause_tb = 1'b0; // Resume
    491             1                          1         door_closed_tb = 1'b0; // Trigger ERROR during STEAM_CLEAN
    492             1                          1         #(period);
    493                                                  if (DUT.current_state == ERROR) begin
    494             1                          1           door_closed_tb = 1'b1; // Resolve ERROR
    495             1                          1           #(period);
    496                                                    if (DUT.current_state == saved_state && DUT.counter == saved_counter) begin
    497             1                          1             $display("Test case 17 passed");
    498                                                    end else begin
    499             1                    ***0***             $display("Test case 17 failed");
    500                                                    end
    501                                                  end else begin
    502             1                    ***0***           $display("Test case 17 failed");
    503                                                  end
    504                                                end
    505                                              endtask
    506                                              
    507                                                task delay(input [31:0] numberOfCounts);
    508                                                  begin  
    509             1                         18            #(numberOfCounts * period);
    510                                                  end
    511                                                endtask
    512                                                
    513                                              ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    514                                              /////////////////////////////////////////// Clock Generator ////////////////////////////////////////////////
    515                                              ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    516                                                
    517                                                always
    518             1                       1137         #(period / 2.0) clk_tb = ~clk_tb;
    518             2                       1136     
    519                                              
    520                                              ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    521                                              ////////////////////////////////////////// DUT Instantation ////////////////////////////////////////////////
    522                                              ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    523                                                    
    524                                                Washing_Machine DUT(
    525                                                .rst_n(rst_n_tb),
    526                                                .clk(clk_tb),
    527                                                .start(start_tb),
    528                                                .double_wash(double_wash_tb),
    529                                                .dry_wash(dry_wash_tb),
    530                                                .time_pause(time_pause_tb),
    531                                                .door_closed(door_closed_tb),
    532                                                .done(done_tb),
    533                                                .error_signal(error_signal_tb)
    534                                                );
    535                                                
    536                                              endmodule

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        48        24        24      50.0

================================Branch Details================================

Branch Coverage for file Washing_Machine_tb.v --

------------------------------------IF Branch------------------------------------
    144                                        1     Count coming in to IF
    144             1                          1           if( DUT.current_state == IDLE )
    148             1                    ***0***           else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    162                                        1     Count coming in to IF
    162             1                          1           if( DUT.current_state == FILL_WATER )
    164             1                    ***0***           else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    173                                        1     Count coming in to IF
    173             1                          1           if( DUT.current_state == WASH)
    177             1                    ***0***           else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    188                                        1     Count coming in to IF
    188             1                          1           if( DUT.current_state == RINSE)
    192             1                    ***0***           else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    203                                        1     Count coming in to IF
    203             1                          1           if( DUT.current_state == SPIN)
    207             1                    ***0***           else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    218                                        1     Count coming in to IF
    218             1                          1           if( DUT.current_state == DRY)
    222             1                    ***0***           else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    233                                        1     Count coming in to IF
    233             1                          1           if( DUT.current_state == IDLE)
    237             1                    ***0***           else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    249                                        1     Count coming in to IF
    249             1                          1           if(done_tb == 1'b1)
    262             1                    ***0***           else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    253                                        1     Count coming in to IF
    253             1                          1               if(done_tb == 1'b0)
    257             1                    ***0***               else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    279                                        1     Count coming in to IF
    279             1                          1           if(DUT.current_state == WASH)
    301             1                    ***0***           else  
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    283                                        1     Count coming in to IF
    283             1                          1               if(DUT.current_state == RINSE)
    296             1                    ***0***               else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    287                                        1     Count coming in to IF
    287             1                          1                   if(DUT.current_state == SPIN)
    291             1                    ***0***                   else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    314                                        1     Count coming in to IF
    314             1                          1           if(DUT.current_state == SPIN)
    327             1                    ***0***           else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    318                                        1     Count coming in to IF
    318             1                          1               if(DUT.current_state == DRY)
    322             1                    ***0***               else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    344                                        1     Count coming in to IF
    344             1                          1           if( DUT.current_state == IDLE)
    346             1                    ***0***           else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    365                                        1     Count coming in to IF
    365             1                          1         if (DUT.current_state == WASH) begin
    367             1                    ***0***         end else begin
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    396                                       30     Count coming in to IF
    396             1                          6             if ($random % 3 == 0) begin
                                              24     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    403                                       30     Count coming in to IF
    403             1                    ***0***             if (!rst_n_tb) begin
                                              30     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    404                                  ***0***     Count coming in to IF
    404             1                    ***0***               if (DUT.current_state != IDLE) begin
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    422                                        1     Count coming in to IF
    422             1                          1         if (DUT.current_state == ERROR) begin
    424             1                    ***0***         end else begin
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    444                                        1     Count coming in to IF
    444             1                          1         if (DUT.current_state == ERROR && DUT.prev_state == saved_state && DUT.backup_counter == saved_counter) begin
    446             1                    ***0***         end else begin
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    468                                        1     Count coming in to IF
    468             1                          1         if (DUT.current_state == saved_state && DUT.counter == saved_counter) begin
    470             1                    ***0***         end else begin
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    493                                        1     Count coming in to IF
    493             1                          1         if (DUT.current_state == ERROR) begin
    501             1                    ***0***         end else begin
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    496                                        1     Count coming in to IF
    496             1                          1           if (DUT.current_state == saved_state && DUT.counter == saved_counter) begin
    498             1                    ***0***           end else begin
Branch totals: 1 hit of 2 branches = 50.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              7         0         7       0.0

================================Condition Details================================

Condition Coverage for file Washing_Machine_tb.v --

----------------Focused Condition View-------------------
Line       444 Item    1  (((DUT.current_state == 7) && (DUT.prev_state == saved_state)) && (DUT.backup_counter == saved_counter))
Condition totals: 0 of 3 input terms covered = 0.0%

                             Input Term   Covered  Reason for no coverage   Hint
                            -----------  --------  -----------------------  --------------
               (DUT.current_state == 7)         N  '_0' not hit             Hit '_0'
        (DUT.prev_state == saved_state)         N  '_0' not hit             Hit '_0'
  (DUT.backup_counter == saved_counter)         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target                               Non-masking condition(s)      
 ---------  ---------  --------------------                     -------------------------     
  Row   1:    ***0***  (DUT.current_state == 7)_0               -                             
  Row   2:          1  (DUT.current_state == 7)_1               ((DUT.backup_counter == saved_counter) && (DUT.prev_state == saved_state))
  Row   3:    ***0***  (DUT.prev_state == saved_state)_0        (DUT.current_state == 7)      
  Row   4:          1  (DUT.prev_state == saved_state)_1        ((DUT.backup_counter == saved_counter) && (DUT.current_state == 7))
  Row   5:    ***0***  (DUT.backup_counter == saved_counter)_0  ((DUT.current_state == 7) && (DUT.prev_state == saved_state))
  Row   6:          1  (DUT.backup_counter == saved_counter)_1  ((DUT.current_state == 7) && (DUT.prev_state == saved_state))

----------------Focused Condition View-------------------
Line       468 Item    1  ((DUT.current_state == saved_state) && (DUT.counter == saved_counter))
Condition totals: 0 of 2 input terms covered = 0.0%

                          Input Term   Covered  Reason for no coverage   Hint
                         -----------  --------  -----------------------  --------------
  (DUT.current_state == saved_state)         N  '_0' not hit             Hit '_0'
      (DUT.counter == saved_counter)         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target                            Non-masking condition(s)      
 ---------  ---------  --------------------                  -------------------------     
  Row   1:    ***0***  (DUT.current_state == saved_state)_0  -                             
  Row   2:          1  (DUT.current_state == saved_state)_1  (DUT.counter == saved_counter)
  Row   3:    ***0***  (DUT.counter == saved_counter)_0      (DUT.current_state == saved_state)
  Row   4:          1  (DUT.counter == saved_counter)_1      (DUT.current_state == saved_state)

----------------Focused Condition View-------------------
Line       496 Item    1  ((DUT.current_state == saved_state) && (DUT.counter == saved_counter))
Condition totals: 0 of 2 input terms covered = 0.0%

                          Input Term   Covered  Reason for no coverage   Hint
                         -----------  --------  -----------------------  --------------
  (DUT.current_state == saved_state)         N  '_0' not hit             Hit '_0'
      (DUT.counter == saved_counter)         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target                            Non-masking condition(s)      
 ---------  ---------  --------------------                  -------------------------     
  Row   1:    ***0***  (DUT.current_state == saved_state)_0  -                             
  Row   2:          1  (DUT.current_state == saved_state)_1  (DUT.counter == saved_counter)
  Row   3:    ***0***  (DUT.counter == saved_counter)_0      (DUT.current_state == saved_state)
  Row   4:          1  (DUT.counter == saved_counter)_1      (DUT.current_state == saved_state)


Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0
Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                     18        18         0     100.0

================================Toggle Details================================

Toggle Coverage for File Washing_Machine_tb.v --

       Line                                   Node      1H->0L      0L->1H  "Coverage"
--------------------------------------------------------------------------------------

Total Node Count     =          9 
Toggled Node Count   =          9 
Untoggled Node Count =          0 

Toggle Coverage      =      100.0% (18 of 18 bins)


ASSERTION RESULTS:
-------------------------------------------------------
Name                 File(Line)           Failure Pass 
                                          Count   Count 
-------------------------------------------------------
/Washing_Machine_tb/DUT/assert__Steam_Clean_Behavior
                     Washing_Machine.v(338)       0     1
/Washing_Machine_tb/DUT/assert__Error_Counter_Restore
                     Washing_Machine.v(335)       0     1
/Washing_Machine_tb/DUT/assert__Error_State_Restore
                     Washing_Machine.v(331)       0     1
/Washing_Machine_tb/DUT/assert__Time_Pause_Functionality
                     Washing_Machine.v(327)       0     1
/Washing_Machine_tb/DUT/assert__Timeout_Dry_Steam
                     Washing_Machine.v(324)       0     1
/Washing_Machine_tb/DUT/assert__Timeout_Spin
                     Washing_Machine.v(320)       0     1
/Washing_Machine_tb/DUT/assert__Timeout_Wash_Rinse
                     Washing_Machine.v(316)       0     1
/Washing_Machine_tb/DUT/assert__Timeout_Fill_Water
                     Washing_Machine.v(312)       0     1
/Washing_Machine_tb/DUT/assert__Double_Wash_Transition
                     Washing_Machine.v(308)       0     1
/Washing_Machine_tb/DUT/assert__IDLE_To_STEAM_CLEAN
                     Washing_Machine.v(305)       0     1
/Washing_Machine_tb/DUT/assert__IDLE_To_FILL_WATER
                     Washing_Machine.v(302)       0     1
/Washing_Machine_tb/DUT/assert__Done_Only_In_IDLE
                     Washing_Machine.v(299)       0     1
/Washing_Machine_tb/DUT/assert__Reset_To_IDLE
                     Washing_Machine.v(296)       0     1

Total Coverage By File (code coverage only, filtered view): 79.1%

